Vehicle.create(:id => 10000, :brand => "NISSAN", :line => "SENTRA", :model => 2013, :serial_number => "J54GHRU475", :color => "GUINDA", :stolen => true, :status => "N/A", :details => "NO HAY DETALLES", :person_id => 10003)
Vehicle.create(:id => 10001, :brand => "FORD", :line => "EXPLORER", :model => 2000, :serial_number => "045JFJRF4231J", :color => "BLANCO", :stolen => false, :status => "N/A", :details => "VEHICULO AVANDONADO", :person_id => 10004)
Vehicle.create(:id => 10004, :brand => "Volkswagen", :line => "Jetta", :model => 2013, :serial_number => "MJ9485849384r", :color => "Gris", :stolen => false, :details => "But this approach becomes increasingly impractical as the table size increases, since User.all.each instructs Active Record to fetch the entire table in a single pass, build a model object per row, and then keep the entire array of model objects in memory. Indeed, if we have a large number of records, the entire collection may exceed the amount of memory available.\r\n\r\nRails provides two methods that address this problem by dividing records into memory-friendly batches for processing. The first method, find_each, retrieves a batch of records and then yields each record to the block individually as a model. The second method, find_in_batches, retrieves a batch of records and then yields the entire batch to the block as an array of models.", :person_id => 10004)
